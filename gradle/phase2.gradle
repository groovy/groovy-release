import at.bxm.gradleplugins.svntools.tasks.SvnAdd
import at.bxm.gradleplugins.svntools.tasks.SvnCheckout
import at.bxm.gradleplugins.svntools.tasks.SvnCommit
import at.bxm.gradleplugins.svntools.tasks.SvnDelete
import at.bxm.gradleplugins.svntools.api.SvnDepth

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.ajoberstar:grgit:1.7.0'
        classpath 'at.bxm.gradleplugins:gradle-svntools-plugin:2.1'
        classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
    }
}

apply plugin: "at.bxm.svntools"

svntools {
    username = apacheUser
    password = apachePassword
}

task promoteOnBintray {
   group = "Post-passed phase"
   description = "Releases the version on Bintray"
}

task synchronizeWithMavenCentral {
   group = "Post-passed phase"
   description = "Releases the version on Bintray"
   dependsOn promoteOnBintray
}

task cleanSvnDistWorkspace(type: Delete) {
    dependsOn synchronizeWithMavenCentral
    project.ext.distWorkspaceRoot = "$project.buildDir/svn-dist-workspace-$branch"
    delete distWorkspaceRoot
}

task prepareSvnDistWorkspace(type: SvnCheckout, dependsOn: cleanSvnDistWorkspace) {
    svnUrl = "https://dist.apache.org/repos/dist/release/groovy"
    workspaceDir = distWorkspaceRoot
    rootProject.ext.distWorkspace = "$distWorkspaceRoot/$relVersion"
    depth = SvnDepth.FILES // slightly more efficient if we have two concurrent releases (e.g. 2.4.latest, 2.5.0)
}

task copyReleaseArtifacts(type: Copy, dependsOn: prepareSvnDistWorkspace) {
    description = "Copies all files from DEV to DIST"
    from (devWorkspace)
    into distWorkspace
}

task addSvnDistFiles(type: SvnAdd, dependsOn: copyReleaseArtifacts) {
    // TODO check whether this is needed since commit seems to do an add anyway?
    description = "Adds the changed files to dist svn"
    add distWorkspace
    recursive true
}

task deleteSvnDevFiles(type: SvnDelete, dependsOn: addSvnDistFiles) {
    description = "Deletes the changed files to svn"
    delete devWorkspace
}

task uploadToApacheDistServers {
    // svntools has no move so add and delete explicitly
    dependsOn deleteSvnDevFiles
    group = "Post-passed phase"
    description = "Moves the artifacts from the DEV subversion server to the DIST subversion server"
    doLast {
        // less declarative than ideal but we want deferred operation since
        // svn plugin assumes list of files to commit is known at config time
        def uploadBuild = project.tasks.create(name: "uploadBuild", type: GradleBuild)
        uploadBuild.startParameter.projectProperties = gradle.startParameter.projectProperties
        uploadBuild.tasks = ['uploadToApacheDistServersInternal']
        uploadBuild.execute()
    }
}

task uploadToApacheDistServersInternal(type: SvnCommit) {
    // TODO remove comments once testing is complete
    source << devWorkspace
    println distWorkspace
//    source << distWorkspace
    def tree = fileTree(distWorkspace).include('**/*')
    tree.visit {
println "$distWorkspace/$it.path"
//        source << "$distWorkspace/$it.path"
    }
    commitMessage = "New version $branch $relVersion added"
}

task uploadDocumentationToGroovyWebsite {
   group = "Post-passed phase"
   description = "Uploads the documentation to the Groovy website server"
   dependsOn uploadToApacheDistServers
}

task maybeUpdateDocumentationSymlink {
   group = "Post-passed phase"
   description = "Changes the symlink to the latest documentation if and only if it's a stable release"
   dependsOn uploadDocumentationToGroovyWebsite
}

task publishToSDKman {
   group = "Post-passed phase"
   description = "Publishes the release on SDKman it and optionally makes it the default version"
   dependsOn maybeUpdateDocumentationSymlink
}

task checkoutGroovyWebsite {
   group = "Post-passed phase"
   description = "Checks out the Groovy website repository"
   dependsOn publishToSDKman
}

task updateGroovySitemap {
   group = "Post-passed phase"
   description = "Updates sitemap.groovy to include the newly released version and commits the result"
   dependsOn checkoutGroovyWebsite
}

task pushGroovyWebsite {
   group = "Post-passed phase"
   description = "Pushes the Groovy website so that the new website is published"
   dependsOn updateGroovySitemap
}

task waitForWebsitePublication {
   group = "Post-passed phase"
   description = "Polls the Groovy website to check if it is released" // check if http://groovy-lang.org/changelogs/changelog-2.4.7.html is created
   dependsOn pushGroovyWebsite
}

task proposeAnnouncementEmail {
   group = "Post-passed phase"
   description = "Generates an [ANN] thread to be tweaked and sent to the dev@, user@ and announce@ mailing lists"
   dependsOn waitForWebsitePublication
}

task announceReleaseOnSDKman {
   group = "Post-passed phase"
   description = "Announces the release on SDKman"
   dependsOn proposeAnnouncementEmail
}


