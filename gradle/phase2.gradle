import at.bxm.gradleplugins.svntools.api.SvnDepth
import at.bxm.gradleplugins.svntools.tasks.SvnAdd
import at.bxm.gradleplugins.svntools.tasks.SvnCheckout
import at.bxm.gradleplugins.svntools.tasks.SvnCommit
import at.bxm.gradleplugins.svntools.tasks.SvnDelete
import groovyx.net.http.RESTClient
import org.ajoberstar.grgit.Credentials

//import static groovyx.net.http.ContentType.JSON

buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'org.ajoberstar:grgit:1.7.0'
        classpath 'at.bxm.gradleplugins:gradle-svntools-plugin:2.1'
        classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
        classpath 'org.hidetake:gradle-ssh-plugin:2.7.0'
        classpath "gradle.plugin.io.sdkman:gradle-sdkvendor-plugin:1.1.1"
    }
}

apply plugin: "at.bxm.svntools"
apply plugin: "org.hidetake.ssh"
apply plugin: "io.sdkman.vendors"

svntools {
    username = apacheUser
    password = apachePassword
}

ssh.settings {
    dryRun = project.hasProperty('dryRun')
//    knownHosts = file(System.getProperty('user.home') + '/.ssh/known_hosts')
    knownHosts = allowAnyHosts
}

remotes {
    ciServer {
        host = 'ci.groovy-lang.org'
        user = findProperty('ciserver.user')
        password = findProperty('ciserver.password')
        //identity = file('id_rsa')
    }
}

sdkman {
    api = "https://vendors.sdkman.io/"
    consumerKey = findProperty('gvm.consumerKey')
    consumerToken = 'dummy'//findProperty('gvm.consumerPassword')
    candidate = "groovy"
    version = "$relVersion"
    url = "http://groovy-lang.org/download.html"
    //url = "http://www.apache.org/dyn/closer.cgi/groovy/${relVersion}/sources/apache-groovy-src-${relVersion}.zip"
    hashtag = "#groovylang"
}

task jiraCheckPhase2 {
    doLast {
        def jira = new RESTClient('https://issues.apache.org/jira/rest/api/2/')
        def resp = jira.get(path: 'project/GROOVY/versions')
        assert resp.status == 200
        def versionFields = resp.data.find { it.name == relVersion }
        assert versionFields, "Version $relVersion not found in Jira!"
        assert versionFields.released, "Version $relVersion not yet released!"
        project.ext.versionId = versionFields.id
        project.ext.projectId = versionFields.projectId

        resp = jira.get(path: "version/$versionId/unresolvedIssueCount")
        assert resp.data
        if (resp.data.issuesUnresolvedCount) {
            logger.warn "Warning found $resp.data.issuesUnresolvedCount unresolved issues for version $relVersion"
        }
        resp = jira.get(path: "version/$versionId/relatedIssueCounts")
        assert resp.data
        project.ext.fixCount = resp.data.issuesFixedCount
    }
}

task promoteOnBintray {
    group = "Post-passed phase"
    description = "Releases the version on Bintray"
    dependsOn jiraCheckPhase2
    doLast {
        println 'TODO promoteOnBintray'
    }
    doLast {
        def sdkman = new groovyx.net.http.RESTClient('https://vendors.sdkman.io/')
        sdkman.headers['consumer_key'] = consumerKey
        sdkman.headers['consumer_token'] = consumerToken
        def resp = jira.put(
                path: '/announce/struct',
                body: /{ "candidate": "groovy", "version": "$versionId", "hashtag" : "#groovylang" }/,
                requestContentType: JSON
        )
        assert resp.status == 200
        println resp.message
    }
}

task synchronizeWithMavenCentral {
    group = "Post-passed phase"
    description = "Releases the version on Bintray"
    dependsOn promoteOnBintray
    doLast {
        println 'TODO synchronizeWithMavenCentral'
    }
}

task cleanSvnDistWorkspace(type: Delete) {
    dependsOn synchronizeWithMavenCentral
    project.ext.distWorkspaceRoot = "$project.buildDir/svn-dist-workspace-$branch"
    delete distWorkspaceRoot
}

task prepareSvnDistWorkspace(type: SvnCheckout, dependsOn: cleanSvnDistWorkspace) {
    svnUrl = "https://dist.apache.org/repos/dist/release/groovy"
    workspaceDir = distWorkspaceRoot
    rootProject.ext.distWorkspace = "$distWorkspaceRoot/$relVersion"
    depth = SvnDepth.FILES // slightly more efficient if we have two concurrent releases (e.g. 2.4.latest, 2.5.0)
}

task copyReleaseArtifacts(type: Copy, dependsOn: prepareSvnDistWorkspace) {
    description = "Copies all files from DEV to DIST"
    from(devWorkspace)
    into distWorkspace
}

task addSvnDistFiles(type: SvnAdd, dependsOn: copyReleaseArtifacts) {
    // TODO check whether this is needed since commit seems to do an add anyway?
    description = "Adds the changed files to dist svn"
    add distWorkspace
    recursive true
}

task deleteSvnDevFiles(type: SvnDelete, dependsOn: addSvnDistFiles) {
    description = "Deletes the changed files to svn"
    delete devWorkspace
}

task uploadToApacheDistServers {
    // svntools has no move so add and delete explicitly
    dependsOn deleteSvnDevFiles
    group = "Post-passed phase"
    description = "Moves the artifacts from the DEV subversion server to the DIST subversion server"
    doLast {
        // less declarative than ideal but we want deferred operation since
        // svn plugin assumes list of files to commit is known at config time
        def uploadBuild = project.tasks.create(name: "uploadBuild", type: GradleBuild)
        uploadBuild.startParameter.projectProperties = gradle.startParameter.projectProperties
        uploadBuild.tasks = ['uploadToApacheDistServersInternal']
        uploadBuild.execute()
    }
}

task uploadToApacheDistServersInternal(type: SvnCommit) {
    source << devWorkspace
    source << distWorkspace
    def tree = fileTree(distWorkspace).include('**/*')
    tree.visit {
//        println "$distWorkspace/$it.path"
        source << "$distWorkspace/$it.path"
    }
    commitMessage = "New version $branch $relVersion added"
}

task uploadDocumentationToGroovyWebsite {
    group = "Post-passed phase"
    description = "Uploads the documentation to the Groovy website server"
    dependsOn uploadToApacheDistServers
    doLast {
        ssh.run {
            session(remotes.ciServer) {
                execute 'uname -a'
                put from: "$stagingDir/target/distributions/apache-groovy-docs-${relVersion}.zip", into: '/var/www/docs/docs'
                execute "unzip -d /var/www/docs/docs/ /var/www/docs/docs/apache-groovy-docs-${relVersion}.zip"
                execute "chgrp -R teamcity /var/www/docs/docs/groovy-${relVersion}/"
                execute "rm /var/www/docs/docs/apache-groovy-docs-${relVersion}.zip"
            }
        }
    }
}

task maybeUpdateDocumentationSymlink {
    group = "Post-passed phase"
    description = "Changes the symlink to the latest documentation if and only if it's a stable release"
    dependsOn uploadDocumentationToGroovyWebsite
    doLast {
        ssh.run {
            session(remotes.ciServer) {
                execute 'uname -a'
                execute "ln -s /var/www/docs/docs/latest groovy-$relVersion"
            }
        }
    }
}

task publishToSDKman {
    group = "Post-passed phase"
    description = "Publishes the release on SDKman"
    dependsOn maybeUpdateDocumentationSymlink
    dependsOn sdkReleaseVersion
}

task makeDefaultOnSDKman {
    group = "Post-passed phase"
    description = "Make it the default version on SDKman"
    dependsOn publishToSDKman
    dependsOn sdkDefaultVersion
}
makeDefaultOnSDKman.onlyIf{ project.findProperty('makeDefault') }

task checkoutGroovyWebsite {
    group = "Post-passed phase"
    description = "Checks out the Groovy website repository"
    dependsOn publishToSDKman
    doLast {
        if (!project.hasProperty('skipClone')) {
            println "Cloning $websiteRepo to $stagingWebsiteDir. This may take a few minutes ..."
            grgitClass.clone(dir: stagingWebsiteDir, uri: websiteRepo)
        }
    }
}

task updateGroovySitemap {
    group = "Post-passed phase"
    description = "Updates sitemap.groovy to include the newly released version and commits the result"
    dependsOn checkoutGroovyWebsite
    doLast {
        def sitemapFile = file("$stagingWebsiteDir/site/src/site/sitemap.groovy")
        def sitemapText = propsFile.text
        sitemapText = sitemapText.replace(numVersion + '-SNAPSHOT', relVersion)
        sitemapText = sitemapText.replace(numVersion + '.SNAPSHOT', relVersion)
        sitemapFile.text = propsText
    }
}

task pushGroovyWebsite {
    group = "Post-passed phase"
    description = "Pushes the Groovy website so that the new website is published"
    dependsOn updateGroovySitemap
    doLast {
        def githubCredentials = new Credentials(username: githubUser, password: githubPassword)
        def grgit = grgitClass.open(dir: stagingWebsiteDir, creds: githubCredentials)
        grgit.add(patterns: ['sitemap.groovy'])
        def commit = grgit.commit(message: "Release $relVersion: update sitemap")
        println "@ $commit.abbreviatedId ($commit.shortMessage)"
    }
}

task waitForWebsitePublication(dependsOn: pushGroovyWebsite) {
    group = "Post-passed phase"
    description = "Polls the Groovy website to check if it is released"
    // check if http://groovy-lang.org/changelogs/changelog-v.x.y.html is created
    doLast {
        println 'TODO waitForWebsitePublication'
    }
}

task proposeAnnouncementEmail(dependsOn: waitForWebsitePublication) {
    group = "Post-passed phase"
    description = "Generates an [ANN] thread to be tweaked and sent to the dev@, user@ and announce@ mailing lists"
    doLast {
        def includeSec = project.findProperty('includeSecurity')
        def newRelease = numVersion.endsWith('.0')
        println """"
Below is a template email to tweak and send to the dev@, user@ and announce@ mailing lists as an [ANNOUNCE] thread.

---------------- >8 -----------------

Dear community,

We are pleased to announce version $versionId of Apache Groovy.
Apache Groovy is a multi-facet programming language for the JVM.
Further details can be found at the http://groovy.apache.org website.

${ stableBuild ? (newRelease ? '''We are proud to announce this new version of Groovy.
Your feedback on any unintentional glitches is welcome.''': '''This release is a maintenance release of the $branch branch.
It is strongly encouraged that all users using prior
versions on this branch upgrade to this version.''') : '''This is a pre-release
of a new version of Groovy. We greatly appreciate any feedback you can give us when using this version..
''' }

${includeSec ? '''
This release contains critical security fixes.
Details can be found on http://groovy-lang.org/security.htm
''' : '' }
This release includes $fixCount bug fixes/improvements as outlined in the changelog:
https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=$projectId&version=$versionId

Sources can be downloaded from: http://www.groovy-lang.org/download.html
Convenience binaries, SDK and documentation can be found at: http://www.groovy-lang.org/download.html

We would like to thank all people who contributed to this release.

We welcome your help and feedback. For more information on how to
report problems, and to get involved, visit the project website at
https://groovy.apache.org/

Best regards,
"""
    }
}

task announceReleaseOnSDKman(dependsOn: [proposeAnnouncementEmail, sdkAnnounceVersion]) {
    group = "Post-passed phase"
    description = "Announces the release on SDKman"
}


